generator Client {
  provider = "prisma-client-js"
}

datasource Db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider              = "prisma-dbml-generator"
//   includeRelationFields = "false"
// }

model Attendance {
  id                   Int              @id @default(autoincrement())
  employeeId           Int
  employee             Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date                 String
  status               AttendanceStatus @default(ONGOING)
  scheduleType         ScheduleType
  timeIn               DateTime         @default(now()) @Db.Timestamptz()
  timeOut              DateTime?
  timeHoursWorked      Float?
  overTimeTotal        Float?
  timeTotal            Float?
  isLate               Boolean?         @default(false)
  isAllowedOvertime    Boolean?         @default(false)
  isRequestingOvertime Boolean?         @default(false)
  isRejectedOvertime   Boolean?         @default(false)
  limitOvertime        Float?           @default(0)
  lunchTimeTotal       Float?           @default(0)
  createdAt            DateTime?        @default(now())
  updatedAt            DateTime?        @updatedAt

  @@index([date])
  @@index([employeeId, date])
  @@map("Attendance")
}

model Schedule {
  id           Int          @id @default(autoincrement())
  scheduleType ScheduleType @default(FIXED) // Type of schedule (FIXED, SUPER_FLEXI, FLEXI)

  // Fixed schedule fields
  startTime DateTime
  endTime   DateTime

  // Flexi schedule fields
  startTimeLimit DateTime?

  // Overtime fields
  limitWorkHoursDay Float?   @default(9)
  allowedOvertime   Boolean? @default(false)
  limitOvertime     Float?   @default(4)

  // Relationships
  DepartmentSchedule DepartmentSchedule?
  PersonalSchedule   PersonalSchedule?
  OneTimeSchedule    OneTimeSchedule?

  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())

  @@index([startTime, endTime])
  @@map("Schedule")
}

model DepartmentSchedule {
  id   Int     @id @default(autoincrement())
  name String? @default("Department Schedule") @Db.VarChar(100)
  role String  @default("EMPLOYEE") @Db.VarChar(50) // Use this to denote job function like "PROGRAMMER", "DESIGNER"

  // Relationships
  scheduleId   Int        @unique
  Schedule     Schedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  departmentId Int
  Department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())

  @@index([departmentId, scheduleId, role])
  @@map("DepartmentSchedule")
}

model PersonalSchedule {
  id   Int     @id @default(autoincrement())
  name String? @default("Personal Schedule") @Db.VarChar(100)
  day  Day[]

  // Relationships
  scheduleId Int      @unique
  Schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId Int      @unique
  Employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())

  @@map("PersonalSchedule")
}

model Employee {
  id                  Int         @id @default(autoincrement())
  username            String      @unique
  email               String      @unique
  accessLevel         AccessLevel
  isActive            Boolean     @default(false)
  passwordCredentials String      @Db.Text
  firstName           String      @Db.VarChar(50)
  lastName            String      @Db.VarChar(50)
  middleName          String?     @Db.VarChar(50)
  role                String?     @default("EMPLOYEE") @Db.VarChar(50) // Use this to denote job function like "PROGRAMMER", "DESIGNER"

  isAllowedRequestOvertime Boolean?    @default(false)
  // Relations 
  departmentId             Int?
  Department               Department? @relation("DepartmentEmployees", fields: [departmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  LeadsDepartment          Department? @relation("DepartmentLeader")
  AuditsDepartment         Department? @relation("DepartmentAuditor")

  PersonalSchedule       PersonalSchedule?
  RequestChangeSchedule  RequestChangePersonalSchedule[]
  RequestOneTimeSchedule RequestOneTimeSchedule[]
  Attendance             Attendance[]
  OneTimeSchedule        OneTimeSchedule[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([accessLevel])
  @@index([departmentId, role])
  @@map("Employee")
}

model Department {
  id                 Int                  @id @default(autoincrement())
  name               String               @Db.VarChar(100)
  leaderId           Int?                 @unique
  Leader             Employee?            @relation("DepartmentLeader", fields: [leaderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  DepartmentSchedule DepartmentSchedule[]
  auditorId          Int?                 @unique
  Auditor            Employee?            @relation("DepartmentAuditor", fields: [auditorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  Employees Employee[] @relation("DepartmentEmployees")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("Department")
}

model Holiday {
  id    Int    @id @default(autoincrement())
  name  String
  month Month  @default(JANUARY)
  day   Int    @default(1)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("Holiday")
}

model Announcement {
  id        Int       @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("Announcement")
}

// TODO IMPLEMENT REQUEST
model OneTimeSchedule {
  id         Int      @id @default(autoincrement())
  employeeId Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date       String

  scheduleId Int       @unique
  Schedule   Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([employeeId, date])
  @@map("OneTimeSchedule")
}

model RequestOneTimeSchedule {
  id                Int           @id @default(autoincrement())
  employeeId        Int           @unique
  Employee          Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scheduleType      ScheduleType
  startTime         DateTime
  startTimeLimit    DateTime?
  endTime           DateTime
  isAllowedOvertime Boolean?      @default(false)
  totalHours        Float?        @default(9)
  day               Day[]
  status            RequestStatus @default(SUBMITTED)
  reason            String?
  createdAt         DateTime?     @default(now())
  updatedAt         DateTime?     @updatedAt

  @@map("RequestOneTimeSchedule")
}

model RequestChangePersonalSchedule {
  id                Int           @id @default(autoincrement())
  employeeId        Int
  Employee          Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scheduleType      ScheduleType
  startTime         DateTime
  startTimeLimit    DateTime?
  endTime           DateTime
  limitOvertime     Float?        @default(0)
  isAllowedOvertime Boolean?      @default(false)
  day               Day[]
  status            RequestStatus @default(SUBMITTED)
  reason            String?
  createdAt         DateTime?     @default(now())
  updatedAt         DateTime?     @updatedAt

  @@map("RequestChangeSchedule")
}

enum AccessLevel {
  ADMIN
  TEAM_LEADER
  EMPLOYEE
  AUDITOR
  SUPER_AUDITOR
}

enum ScheduleType {
  FIXED
  SUPER_FLEXI
  FLEXI
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AttendanceStatus {
  BREAK
  DONE
  PAID_LEAVE
  ONGOING
}

enum RequestStatus {
  APPROVED_BY_ADMIN
  APPROVED_BY_TEAM_LEADER
  REJECTED_BY_ADMIN
  REJECTED_BY_TEAM_LEADER
  SUBMITTED
}

enum Month {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}
